plugins {
	id 'java'
	id 'maven-publish'
	id "io.freefair.lombok" version "6.6.1"
}

sourceCompatibility = 8
targetCompatibility = 8

group = "de.phoenixmitx"
archivesBaseName = "LombokExtensions"
version = "1.0.9"
description = "A library for lomboks ExtensionMethods"

sourceSets {
	codegen {
		java {
			srcDir 'src/codegen/java'
		}
	}
}

repositories {
	mavenCentral()
}

dependencies {
	// codegen
	codegenImplementation 'org.javassist:javassist:3.29.2-GA'
	
	// test
	testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.9.2'
}

lombok { version = "1.18.26" }

task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

task codegenJar (type: Jar) {
	dependsOn compileCodegenJava
	from { configurations.codegenRuntimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }

	archiveFileName = "LombokExtensions-${project.version}-codegen.jar"
}

task recompileJava(type: JavaExec) {
	dependsOn codegenJar, compileJava
	classpath = sourceSets.main.output + sourceSets.codegen.output + sourceSets.codegen.compileClasspath
	mainClass = "de.phoenixmitx.lombokextensions.codegen.Codegen"
	systemProperties = [
		"java.util.logging.SimpleFormatter.format": "[%1\$tF %1\$tT] [%4\$-7s] %5\$s %n"
	]
}

compileJava {
	// TODO find a way to not need to clean the compileJava task for the codegen to work
  dependsOn compileCodegenJava, cleanCompileJava
	finalizedBy recompileJava
  classpath += sourceSets.codegen.output
}

test {
	useJUnitPlatform()
	testLogging {
		showStandardStreams = true
	}
	testLogging {
		exceptionFormat = 'full'
	}
}

artifacts {
	archives sourcesJar
}

publishing {
	publications {
		testing(MavenPublication) {
			from components.java
			artifact sourcesJar
		}
	}
}